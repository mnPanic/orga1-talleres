1.
    a.  Fetch   --> Control Unit, Memory, PC, Decoder (set de IR Low y High), Interrupt Controller
        Decode  --> Decoder (con su IR Low y High)
        Execute --> Registers (if required), PC (if required), ALU, Memory (if required), Control Unit 
                    [Interrupt Controller también por STI, CLI, etc]
    b.  Dejaría la ejecución de la subrutina de interrupción para el final del Execute o comienzo de Fetch 
        (si bien la interrupción) puede ocurrir en cualquier momento, resulta importante terminar la
        el ciclo de instrucción actual antes de prestarle atención. En particular, quizás conviene al comienzo
        del Fetch, puesto que siempre se ejecutará y a simple vista nos parecería que resultaría más fácil
        de implementar.
    c.  Las microinstrucciones se almacenan en una ROM, dentro de la Control Unit.
    d.  El operation code que se obtiene de la instrucción real es el que define a qué posición de la
        ROM se irá a buscar la "subrutina" de microinstrucciones
    e.  Un IF en un microprograma consta de una sucesión de microinstrucciones. En particular, un IF
        se debería armar con algún salto condicional, por ejemplo el JZ. En este caso, el microprograma
        se basaría en la siguiente idea: Se verificaría si el tipo de salto es un JZ y al mismo tiempo el
        flag Z está prendido. Para ello, se hará una AND entre los dos valores y, en caso de resultar esto
        en un "1", se seleccionará una de dos entradas a través de un Multiplexor. Estas dos entradas constan
        de el MicroPC actual + 1 o MicroPC actual + 2. Si se quiere saltar, se usará el + 2, puesto que luego
        de realizar este checkeo, la siguiente instrucción será la de resettear el MicroPC (lo que resultaría
        en la vuelta al Fetch y la finalización de la ejecución de la instrucción actual). En caso de ser + 2,
        se harán las operaciones necesarias para modificar el PC y luego se volverá al Fetch.

2.
    a.  Si el cable vale siempre 0, nunca se le prestará atención a la interrupción. En caso de que el cable
        valga siempre 1, siempre se saltará de a 7 microinstrucciones a la vez, resultando en un comportamiento
        completamente erróneo y errático.

4.  a.     SET R1, 0x03     ; R1 := 0x03
           SET R2, 0x00     ; R2 := 0x00
           SET R3, rai      ; R3 := rai
           STR [0x00], R3   ; [0x00] := rai
           STI              ; Can interrupt
        loop:
           CMP R1, R2
           JZ fin           ; if R1 == R2 then end
           JMP loop         ; Vuelvo a loopear
        fin: 
            CLI             ; Clear interrupt
        halt:
            JMP halt
        rai:
            DEC R1          ; Decrement R1
            IRET
        
        El programa va a seguir comparando R1 con R2 hasta que sean iguales. Esto ocurrirá cuando el programa 
        haya sido interrumpido 3 veces (la subrutina de interrupción decrementa R1). 
        Es decir, "cuenta" 3 interrupciones y termina.
    b.  Tienen que ser 3 veces, exacto. Puesto que si se ejecuta más de 3 veces el programa no terminará nunca.
    c.  Si se ejecuta 3 o menos veces, no hay drama, se loopeará menos veces.
        Si se ejecuta 4 o más veces, estamos en problemas porque el programa no va a terminar nunca.
    d.  Hay problema, porque DEC modifica flags y en ningún momento estamos guardando el PSW. Esto hace que se
        pueda hacer un salto erróneo o no terminar nunca. Pero, esto básicamente quiere decir que tenemos los 
        mismos comportamientos enunciados en el inciso c.

5.  SET R1, 0x01    ; R1 := Velocidad para curva
    SET R2, 0x02    ; R2 := Velocidad máxima
    SET R3, 0x02
    STR [0xF0], R3  ; Arrancamos con velocidad máxima
    SET R0, rai
    STR [0x00], R0  ; Configura rutina de atención de interrupciones
    STI             ; Habilito interrupciones

    wait:
    JMP wait

    rai:
    CMP R3, R2
    JZ hayCurva      ; Si R3 == Velocidad Máxima, hayCurva
    MOV R3, R2       ; Sino, setteamos velocida máxima
    JMP endInterrupt

    hayCurva:
    MOV R3, R1      ; Setteamos la velocidad de curva
    
    endInterrupt:
    STR [0xF0], R3
    IRET